name: Build Buyer & Merchant APK (release)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - id: buyer
            dir: Soma_demo_app_foad/buyer-app
            artifact: buyer-app-release.apk
          - id: merchant
            dir: Soma_demo_app_foad/merchant-app
            artifact: merchant-app-release.apk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter (stable 3.24.x)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"
          channel: stable
          cache: true

      - name: Verify pubspec exists
        run: |
          test -f "${{ matrix.app.dir }}/pubspec.yaml" || (echo "❌ pubspec.yaml not found" && exit 1)

      # اسکَفلد اندروید تمیز تا AGP 8 درست ستاپ شود
      - name: Regenerate Android scaffold (safe)
        run: |
          APP_NAME="${{ matrix.app.id }}_app"
          SRC="${{ matrix.app.dir }}"
          TMP="/tmp/${APP_NAME}"
          rm -rf "$TMP"
          flutter create --platforms android --org ir.soma.demo --project-name ${APP_NAME} "$TMP"
          rsync -a --delete "$TMP/android/" "$SRC/android/"
          chmod +x "$SRC/android/gradlew"
          echo "✅ Android scaffold refreshed for ${APP_NAME}"

      - name: Get dependencies
        working-directory: ${{ matrix.app.dir }}
        run: flutter pub get

      # 🔧 پَچ مشخص و مستقیم روی پلاگین‌های بلوتوث که از flutter.* استفاده می‌کنند
      - name: Patch flutter_blue_plus plugins for AGP 8
        shell: bash
        run: |
          set -e

          # ریشهٔ کشِ pub.dev در runner
          CACHE_ROOT="${PUB_CACHE:-$HOME/.pub-cache}/hosted/pub.dev"
          if [ ! -d "$CACHE_ROOT" ]; then
            echo "⚠️ Pub cache not found: $CACHE_ROOT"
            exit 0
          fi

          # لیست فایل‌های build.gradle هدف‌دار (نسخه ممکن است تغییر کند، پس از wildcard استفاده می‌کنیم)
          TARGETS=()
          while IFS= read -r f; do TARGETS+=("$f"); done < <( \
            ls "$CACHE_ROOT"/flutter_blue_plus_android-*/android/build.gradle 2>/dev/null || true
          )
          while IFS= read -r f; do TARGETS+=("$f"); done < <( \
            ls "$CACHE_ROOT"/flutter_blue_plus-*/android/build.gradle 2>/dev/null || true
          )

          if [ ${#TARGETS[@]} -eq 0 ]; then
            echo "ℹ️ No flutter_blue_plus* build.gradle files found to patch."
          fi

          for F in "${TARGETS[@]}"; do
            echo "🔧 Patching: $F"

            # بکاپ
            cp "$F" "$F.bak"

            # اگر ابتدای فایل plugins DSL ندارد، اضافه نمی‌کنیم؛ فقط جایگزینی انجام می‌دهیم
            # جایگزینی ارجاعات flutter.* با مقادیر ثابت امن
            sed -i 's/compileSdkVersion[[:space:]]\+flutter\.[^)\n]*/compileSdkVersion 34/g' "$F"
            sed -i 's/targetSdkVersion[[:space:]]\+flutter\.[^)\n]*/targetSdkVersion 34/g' "$F"
            sed -i 's/minSdkVersion[[:space:]]\+flutter\.[^)\n]*/minSdkVersion 21/g' "$F"
            sed -i 's/ndkVersion[[:space:]]\+flutter\.[^)\n]*/ndkVersion "25.1.8937393"/g' "$F"

            # هر خط باقی‌مانده که شامل flutter. باشد را کامنت کن تا Gradle ایراد نگیرد
            sed -i 's/^\([[:space:]]*\)\(.*flutter\..*\)$/\1\/\/ \2/g' "$F"

            # اطمینان از وجود block android و compileSdk (اگر نبود، یک خط compileSdkVersion 34 تزریق می‌کنیم)
            if ! grep -q "compileSdkVersion" "$F"; then
              awk '
                /android[[:space:]]*\{/ && !ins { print; print "    compileSdkVersion 34"; ins=1; next }
                { print }
              ' "$F" > "$F.tmp" && mv "$F.tmp" "$F"
            fi

            echo "✅ Patched $F"
          done

      # ساخت ریلیز
      - name: Build APK (release)
        working-directory: ${{ matrix.app.dir }}
        run: |
          flutter build apk --release
          ls -lah build/app/outputs/flutter-apk

      - name: Prepare artifact
        if: success()
        working-directory: ${{ matrix.app.dir }}
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts/${{ matrix.app.id }}
          cp build/app/outputs/flutter-apk/app-release.apk $GITHUB_WORKSPACE/artifacts/${{ matrix.app.id }}/${{ matrix.app.artifact }}

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app.id }}.apk
          path: artifacts/${{ matrix.app.id }}/${{ matrix.app.artifact }}
          if-no-files-found: error
