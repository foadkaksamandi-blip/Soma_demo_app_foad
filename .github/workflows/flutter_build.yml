name: Build Buyer & Merchant APK (release)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          - id: buyer
            dir: Soma_demo_app_foad/buyer-app
            artifact: buyer-app-release.apk
          - id: merchant
            dir: Soma_demo_app_foad/merchant-app
            artifact: merchant-app-release.apk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter (stable 3.24.x)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.3"
          channel: stable
          cache: true

      - name: Verify pubspec exists
        run: |
          test -f "${{ matrix.app.dir }}/pubspec.yaml" || (echo "‚ùå pubspec.yaml not found" && exit 1)

      - name: Regenerate Android scaffold (safe)
        run: |
          APP_NAME="${{ matrix.app.id }}_app"
          SRC="${{ matrix.app.dir }}"
          TMP="/tmp/${APP_NAME}"
          rm -rf "$TMP"
          flutter create --platforms android --org ir.soma.demo --project-name ${APP_NAME} "$TMP"
          rsync -a --delete "$TMP/android/" "$SRC/android/"
          chmod +x "$SRC/android/gradlew"
          echo "‚úÖ Android scaffold refreshed for ${APP_NAME}"

      - name: Get dependencies
        working-directory: ${{ matrix.app.dir }}
        run: flutter pub get

      - name: Patch flutter_blue_plus* (Groovy/KTS) for AGP 8
        shell: bash
        run: |
          set -euo pipefail
          CACHE_ROOT="${PUB_CACHE:-$HOME/.pub-cache}/hosted"
          if [ ! -d "$CACHE_ROOT" ]; then
            echo "‚ùå Pub cache not found: $CACHE_ROOT"; exit 1
          fi

          mapfile -t PKGS < <(find "$CACHE_ROOT" -type d \( -name "pub.dev" -o -name "pub.dartlang.org" \) -prune -o \
            -type d \( -name "flutter_blue_plus*" -o -name "flutter_blue_plus_android*" \) -print 2>/dev/null | sort)

          patch_groovy() {
            local f="$1"
            cp "$f" "$f.bak"
            # ÿß⁄Øÿ± ÿßÿ±ÿ¨ÿßÿπ flutter.* Ÿàÿ¨ŸàÿØ ÿØÿßÿ±ÿØ Ÿà ÿ¢ÿ®ÿ¨⁄©ÿ™ flutter ÿ™ÿπÿ±€åŸÅ ŸÜÿ¥ÿØŸáÿå map ÿ™ÿ≤ÿ±€åŸÇ ⁄©ŸÜ
            if grep -q "flutter\." "$f" && ! grep -qE '(^|[^[:alnum:]_])def[[:space:]]+flutter[[:space:]]*=' "$f"; then
              awk '
                BEGIN { injected=0 }
                {
                  if (!injected && $0 ~ /^[[:space:]]*android[[:space:]]*\{/ ) {
                    print "def flutter = [";
                    print "  minSdkVersion: 21,";
                    print "  targetSdkVersion: 34,";
                    print "  compileSdkVersion: 34,";
                    print "  ndkVersion: \"25.1.8937393\"";
                    print "]";
                    injected=1;
                  }
                  print $0
                }
              ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            fi
            # ÿß⁄Øÿ± compileSdkVersion ŸÜÿ®ŸàÿØÿå ÿ™ÿ≤ÿ±€åŸÇ ÿØÿßÿÆŸÑ android{}
            if ! grep -qE '^[[:space:]]*compileSdkVersion[[:space:]]+' "$f"; then
              awk '
                /android[[:space:]]*\{/ && !ins { print; print "    compileSdkVersion 34"; ins=1; next }
                { print }
                END { if (!ins) { print "android {"; print "    compileSdkVersion 34"; print "}" } }
              ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            fi
          }

          patch_kts() {
            local f="$1"
            cp "$f" "$f.bak"
            # KTS: ŸÅŸÇÿ∑ ensure compileSdk
            if ! grep -qE '^[[:space:]]*compileSdk[[:space:]]*=' "$f"; then
              awk '
                /android[[:space:]]*\{/ && !ins { print; print "    compileSdk = 34"; ins=1; next }
                { print }
                END { if (!ins) { print "android {"; print "    compileSdk = 34"; print "}" } }
              ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
            fi
          }

          for pkg in "${PKGS[@]:-}"; do
            mapfile -t FILES < <(find "$pkg" -type f \( -name "build.gradle" -o -name "build.gradle.kts" \) -path "*/android/*" 2>/dev/null | sort)
            for f in "${FILES[@]:-}"; do
              echo "üîß Patching $f"
              case "$f" in
                *.kts) patch_kts "$f" ;;
                *)     patch_groovy "$f" ;;
              esac
              echo "‚úÖ Patched: $f"
            done
          done

      - name: Build APK (release)
        working-directory: ${{ matrix.app.dir }}
        run: |
          flutter build apk --release
          ls -lah build/app/outputs/flutter-apk

      - name: Prepare artifact
        if: success()
        working-directory: ${{ matrix.app.dir }}
        run: |
          mkdir -p $GITHUB_WORKSPACE/artifacts/${{ matrix.app.id }}
          cp build/app/outputs/flutter-apk/app-release.apk $GITHUB_WORKSPACE/artifacts/${{ matrix.app.id }}/${{ matrix.app.artifact }}

      - name: Upload APK artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app.id }}.apk
          path: artifacts/${{ matrix.app.id }}/${{ matrix.app.artifact }}
          if-no-files-found: error
